// Package platformapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package platformapiv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FeatureFlag defines model for FeatureFlag.
type FeatureFlag struct {
	CreatedAt time.Time `json:"createdAt"`

	// Description A short description of the feature flag
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`

	// Name The name of the feature flag
	Name string `json:"name"`

	// Status Whether the feature flag is enabled or disabled
	Status    bool      `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// FeatureFlagList defines model for FeatureFlagList.
type FeatureFlagList struct {
	Total     int            `json:"total"`
	Workflows *[]FeatureFlag `json:"workflows,omitempty"`
}

// FeatureFlagRequest defines model for FeatureFlagRequest.
type FeatureFlagRequest struct {
	// Description A short description of the feature flag (optional)
	Description *string `json:"description,omitempty"`

	// Name The name of the feature flag
	Name string `json:"name"`

	// Status Whether the feature flag is enabled or disabled
	Status bool `json:"status"`
}

// FeatureFlagResponse defines model for FeatureFlagResponse.
type FeatureFlagResponse struct {
	// Name The name of the feature flag
	Name string `json:"name"`

	// Status Whether the feature flag is enabled or disabled
	Status bool `json:"status"`
}

// FeatureFlagToggleRequest defines model for FeatureFlagToggleRequest.
type FeatureFlagToggleRequest struct {
	// Status Indicates if the feature flag should be enabled (true) or disabled (false)
	Status bool `json:"status"`
}

// FeatureFlagUpdateRequest defines model for FeatureFlagUpdateRequest.
type FeatureFlagUpdateRequest struct {
	// Description An optional description of the feature flag
	Description *string `json:"description,omitempty"`

	// Name The name of the feature flag
	Name string `json:"name"`

	// Status Indicates if the feature flag is enabled (true) or disabled (false)
	Status bool `json:"status"`
}

// CreateFeatureFlagJSONRequestBody defines body for CreateFeatureFlag for application/json ContentType.
type CreateFeatureFlagJSONRequestBody = FeatureFlagRequest

// UpdateFeatureFlagToggleJSONRequestBody defines body for UpdateFeatureFlagToggle for application/json ContentType.
type UpdateFeatureFlagToggleJSONRequestBody = FeatureFlagToggleRequest

// UpdateFeatureFlagJSONRequestBody defines body for UpdateFeatureFlag for application/json ContentType.
type UpdateFeatureFlagJSONRequestBody = FeatureFlagUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all feature flags
	// (GET /feature-flags)
	ListFeatureFlags(w http.ResponseWriter, r *http.Request)
	// Create a new feature flag
	// (POST /feature-flags)
	CreateFeatureFlag(w http.ResponseWriter, r *http.Request)
	// Delete a specific feature flag by ID
	// (DELETE /feature-flags/{id})
	DeleteFeatureFlag(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Retrieve a specific feature flag by ID
	// (GET /feature-flags/{id})
	GetFeatureFlag(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Toggle a feature flag on or off
	// (PATCH /feature-flags/{id})
	UpdateFeatureFlagToggle(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update a specific feature flag by ID
	// (PUT /feature-flags/{id})
	UpdateFeatureFlag(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Retrieve all feature flags
// (GET /feature-flags)
func (_ Unimplemented) ListFeatureFlags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new feature flag
// (POST /feature-flags)
func (_ Unimplemented) CreateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific feature flag by ID
// (DELETE /feature-flags/{id})
func (_ Unimplemented) DeleteFeatureFlag(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve a specific feature flag by ID
// (GET /feature-flags/{id})
func (_ Unimplemented) GetFeatureFlag(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Toggle a feature flag on or off
// (PATCH /feature-flags/{id})
func (_ Unimplemented) UpdateFeatureFlagToggle(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific feature flag by ID
// (PUT /feature-flags/{id})
func (_ Unimplemented) UpdateFeatureFlag(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListFeatureFlags operation middleware
func (siw *ServerInterfaceWrapper) ListFeatureFlags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatureFlags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) CreateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeatureFlag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeatureFlag(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeatureFlag(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFeatureFlagToggle operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeatureFlagToggle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFeatureFlagToggle(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFeatureFlag operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeatureFlag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFeatureFlag(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/feature-flags", wrapper.ListFeatureFlags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/feature-flags", wrapper.CreateFeatureFlag)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/feature-flags/{id}", wrapper.DeleteFeatureFlag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/feature-flags/{id}", wrapper.GetFeatureFlag)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/feature-flags/{id}", wrapper.UpdateFeatureFlagToggle)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/feature-flags/{id}", wrapper.UpdateFeatureFlag)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
