// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package pqmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FeatureFlag is an object representing the database table.
type FeatureFlag struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID     string      `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Active      bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *featureFlagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L featureFlagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FeatureFlagColumns = struct {
	ID          string
	OwnerID     string
	Name        string
	Active      string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	OwnerID:     "owner_id",
	Name:        "name",
	Active:      "active",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var FeatureFlagTableColumns = struct {
	ID          string
	OwnerID     string
	Name        string
	Active      string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "feature_flags.id",
	OwnerID:     "feature_flags.owner_id",
	Name:        "feature_flags.name",
	Active:      "feature_flags.active",
	Description: "feature_flags.description",
	CreatedAt:   "feature_flags.created_at",
	UpdatedAt:   "feature_flags.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var FeatureFlagWhere = struct {
	ID          whereHelperstring
	OwnerID     whereHelperstring
	Name        whereHelperstring
	Active      whereHelperbool
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"feature_flags\".\"id\""},
	OwnerID:     whereHelperstring{field: "\"feature_flags\".\"owner_id\""},
	Name:        whereHelperstring{field: "\"feature_flags\".\"name\""},
	Active:      whereHelperbool{field: "\"feature_flags\".\"active\""},
	Description: whereHelpernull_String{field: "\"feature_flags\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"feature_flags\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"feature_flags\".\"updated_at\""},
}

// FeatureFlagRels is where relationship names are stored.
var FeatureFlagRels = struct {
	Owner string
}{
	Owner: "Owner",
}

// featureFlagR is where relationships are stored.
type featureFlagR struct {
	Owner *User `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
}

// NewStruct creates a new relationship struct
func (*featureFlagR) NewStruct() *featureFlagR {
	return &featureFlagR{}
}

func (r *featureFlagR) GetOwner() *User {
	if r == nil {
		return nil
	}
	return r.Owner
}

// featureFlagL is where Load methods for each relationship are stored.
type featureFlagL struct{}

var (
	featureFlagAllColumns            = []string{"id", "owner_id", "name", "active", "description", "created_at", "updated_at"}
	featureFlagColumnsWithoutDefault = []string{"owner_id", "name"}
	featureFlagColumnsWithDefault    = []string{"id", "active", "description", "created_at", "updated_at"}
	featureFlagPrimaryKeyColumns     = []string{"id"}
	featureFlagGeneratedColumns      = []string{}
)

type (
	// FeatureFlagSlice is an alias for a slice of pointers to FeatureFlag.
	// This should almost always be used instead of []FeatureFlag.
	FeatureFlagSlice []*FeatureFlag
	// FeatureFlagHook is the signature for custom FeatureFlag hook methods
	FeatureFlagHook func(context.Context, boil.ContextExecutor, *FeatureFlag) error

	featureFlagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	featureFlagType                 = reflect.TypeOf(&FeatureFlag{})
	featureFlagMapping              = queries.MakeStructMapping(featureFlagType)
	featureFlagPrimaryKeyMapping, _ = queries.BindMapping(featureFlagType, featureFlagMapping, featureFlagPrimaryKeyColumns)
	featureFlagInsertCacheMut       sync.RWMutex
	featureFlagInsertCache          = make(map[string]insertCache)
	featureFlagUpdateCacheMut       sync.RWMutex
	featureFlagUpdateCache          = make(map[string]updateCache)
	featureFlagUpsertCacheMut       sync.RWMutex
	featureFlagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var featureFlagAfterSelectMu sync.Mutex
var featureFlagAfterSelectHooks []FeatureFlagHook

var featureFlagBeforeInsertMu sync.Mutex
var featureFlagBeforeInsertHooks []FeatureFlagHook
var featureFlagAfterInsertMu sync.Mutex
var featureFlagAfterInsertHooks []FeatureFlagHook

var featureFlagBeforeUpdateMu sync.Mutex
var featureFlagBeforeUpdateHooks []FeatureFlagHook
var featureFlagAfterUpdateMu sync.Mutex
var featureFlagAfterUpdateHooks []FeatureFlagHook

var featureFlagBeforeDeleteMu sync.Mutex
var featureFlagBeforeDeleteHooks []FeatureFlagHook
var featureFlagAfterDeleteMu sync.Mutex
var featureFlagAfterDeleteHooks []FeatureFlagHook

var featureFlagBeforeUpsertMu sync.Mutex
var featureFlagBeforeUpsertHooks []FeatureFlagHook
var featureFlagAfterUpsertMu sync.Mutex
var featureFlagAfterUpsertHooks []FeatureFlagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FeatureFlag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FeatureFlag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FeatureFlag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FeatureFlag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FeatureFlag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FeatureFlag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FeatureFlag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FeatureFlag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FeatureFlag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range featureFlagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFeatureFlagHook registers your hook function for all future operations.
func AddFeatureFlagHook(hookPoint boil.HookPoint, featureFlagHook FeatureFlagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		featureFlagAfterSelectMu.Lock()
		featureFlagAfterSelectHooks = append(featureFlagAfterSelectHooks, featureFlagHook)
		featureFlagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		featureFlagBeforeInsertMu.Lock()
		featureFlagBeforeInsertHooks = append(featureFlagBeforeInsertHooks, featureFlagHook)
		featureFlagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		featureFlagAfterInsertMu.Lock()
		featureFlagAfterInsertHooks = append(featureFlagAfterInsertHooks, featureFlagHook)
		featureFlagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		featureFlagBeforeUpdateMu.Lock()
		featureFlagBeforeUpdateHooks = append(featureFlagBeforeUpdateHooks, featureFlagHook)
		featureFlagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		featureFlagAfterUpdateMu.Lock()
		featureFlagAfterUpdateHooks = append(featureFlagAfterUpdateHooks, featureFlagHook)
		featureFlagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		featureFlagBeforeDeleteMu.Lock()
		featureFlagBeforeDeleteHooks = append(featureFlagBeforeDeleteHooks, featureFlagHook)
		featureFlagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		featureFlagAfterDeleteMu.Lock()
		featureFlagAfterDeleteHooks = append(featureFlagAfterDeleteHooks, featureFlagHook)
		featureFlagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		featureFlagBeforeUpsertMu.Lock()
		featureFlagBeforeUpsertHooks = append(featureFlagBeforeUpsertHooks, featureFlagHook)
		featureFlagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		featureFlagAfterUpsertMu.Lock()
		featureFlagAfterUpsertHooks = append(featureFlagAfterUpsertHooks, featureFlagHook)
		featureFlagAfterUpsertMu.Unlock()
	}
}

// One returns a single featureFlag record from the query.
func (q featureFlagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FeatureFlag, error) {
	o := &FeatureFlag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "pqmodels: failed to execute a one query for feature_flags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FeatureFlag records from the query.
func (q featureFlagQuery) All(ctx context.Context, exec boil.ContextExecutor) (FeatureFlagSlice, error) {
	var o []*FeatureFlag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "pqmodels: failed to assign all query results to FeatureFlag slice")
	}

	if len(featureFlagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FeatureFlag records in the query.
func (q featureFlagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: failed to count feature_flags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q featureFlagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "pqmodels: failed to check if feature_flags exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *FeatureFlag) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (featureFlagL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFeatureFlag interface{}, mods queries.Applicator) error {
	var slice []*FeatureFlag
	var object *FeatureFlag

	if singular {
		var ok bool
		object, ok = maybeFeatureFlag.(*FeatureFlag)
		if !ok {
			object = new(FeatureFlag)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFeatureFlag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFeatureFlag))
			}
		}
	} else {
		s, ok := maybeFeatureFlag.(*[]*FeatureFlag)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFeatureFlag)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFeatureFlag))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &featureFlagR{}
		}
		args[object.OwnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &featureFlagR{}
			}

			args[obj.OwnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerFeatureFlags = append(foreign.R.OwnerFeatureFlags, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerFeatureFlags = append(foreign.R.OwnerFeatureFlags, local)
				break
			}
		}
	}

	return nil
}

// SetOwner of the featureFlag to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerFeatureFlags.
func (o *FeatureFlag) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"feature_flags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, featureFlagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &featureFlagR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerFeatureFlags: FeatureFlagSlice{o},
		}
	} else {
		related.R.OwnerFeatureFlags = append(related.R.OwnerFeatureFlags, o)
	}

	return nil
}

// FeatureFlags retrieves all the records using an executor.
func FeatureFlags(mods ...qm.QueryMod) featureFlagQuery {
	mods = append(mods, qm.From("\"feature_flags\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"feature_flags\".*"})
	}

	return featureFlagQuery{q}
}

// FindFeatureFlag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFeatureFlag(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FeatureFlag, error) {
	featureFlagObj := &FeatureFlag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"feature_flags\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, featureFlagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "pqmodels: unable to select from feature_flags")
	}

	if err = featureFlagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return featureFlagObj, err
	}

	return featureFlagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FeatureFlag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("pqmodels: no feature_flags provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(featureFlagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	featureFlagInsertCacheMut.RLock()
	cache, cached := featureFlagInsertCache[key]
	featureFlagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			featureFlagAllColumns,
			featureFlagColumnsWithDefault,
			featureFlagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(featureFlagType, featureFlagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(featureFlagType, featureFlagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"feature_flags\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"feature_flags\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "pqmodels: unable to insert into feature_flags")
	}

	if !cached {
		featureFlagInsertCacheMut.Lock()
		featureFlagInsertCache[key] = cache
		featureFlagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FeatureFlag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FeatureFlag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	featureFlagUpdateCacheMut.RLock()
	cache, cached := featureFlagUpdateCache[key]
	featureFlagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			featureFlagAllColumns,
			featureFlagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("pqmodels: unable to update feature_flags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"feature_flags\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, featureFlagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(featureFlagType, featureFlagMapping, append(wl, featureFlagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to update feature_flags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: failed to get rows affected by update for feature_flags")
	}

	if !cached {
		featureFlagUpdateCacheMut.Lock()
		featureFlagUpdateCache[key] = cache
		featureFlagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q featureFlagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to update all for feature_flags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to retrieve rows affected for feature_flags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FeatureFlagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("pqmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featureFlagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"feature_flags\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, featureFlagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to update all in featureFlag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to retrieve rows affected all in update all featureFlag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FeatureFlag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("pqmodels: no feature_flags provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(featureFlagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	featureFlagUpsertCacheMut.RLock()
	cache, cached := featureFlagUpsertCache[key]
	featureFlagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			featureFlagAllColumns,
			featureFlagColumnsWithDefault,
			featureFlagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			featureFlagAllColumns,
			featureFlagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("pqmodels: unable to upsert feature_flags, could not build update column list")
		}

		ret := strmangle.SetComplement(featureFlagAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(featureFlagPrimaryKeyColumns) == 0 {
				return errors.New("pqmodels: unable to upsert feature_flags, could not build conflict column list")
			}

			conflict = make([]string, len(featureFlagPrimaryKeyColumns))
			copy(conflict, featureFlagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"feature_flags\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(featureFlagType, featureFlagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(featureFlagType, featureFlagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "pqmodels: unable to upsert feature_flags")
	}

	if !cached {
		featureFlagUpsertCacheMut.Lock()
		featureFlagUpsertCache[key] = cache
		featureFlagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FeatureFlag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FeatureFlag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("pqmodels: no FeatureFlag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), featureFlagPrimaryKeyMapping)
	sql := "DELETE FROM \"feature_flags\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to delete from feature_flags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: failed to get rows affected by delete for feature_flags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q featureFlagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("pqmodels: no featureFlagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to delete all from feature_flags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: failed to get rows affected by deleteall for feature_flags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FeatureFlagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(featureFlagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featureFlagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"feature_flags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, featureFlagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: unable to delete all from featureFlag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "pqmodels: failed to get rows affected by deleteall for feature_flags")
	}

	if len(featureFlagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FeatureFlag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFeatureFlag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FeatureFlagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FeatureFlagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featureFlagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"feature_flags\".* FROM \"feature_flags\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, featureFlagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "pqmodels: unable to reload all in FeatureFlagSlice")
	}

	*o = slice

	return nil
}

// FeatureFlagExists checks if the FeatureFlag row exists.
func FeatureFlagExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"feature_flags\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "pqmodels: unable to check if feature_flags exists")
	}

	return exists, nil
}

// Exists checks if the FeatureFlag row exists.
func (o *FeatureFlag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FeatureFlagExists(ctx, exec, o.ID)
}
